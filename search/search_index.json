{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"yaml2rss documentation Generate a RSS podcast feed from YAML. For a step by step tutorial that covers the installation process and running the project, check Getting started . Structure Tutorials : take you by the hand through a series of steps to install, run and use this software. Topic guides : discuss key topics and concepts at a fairly high level and provide useful background information and explanation. Reference guides : contain technical reference for the code. They describe how it works and how to use it but assume that you have a basic understanding of key concepts. How-to guides : they guide you through the steps involved in addressing key problems and use-cases. They are more advanced than tutorials and assume some knowledge of how this software works. This structure is based on Django's one . You can find more information about it on https://documentation.divio.com/ . Apart from this documentation, the HTTP API documentation can be found at the API server URL in the /docs directory. Adding new documentation To add new documentation, create a Markdown file in the appropriate directory with the content. It will automatically be added to the index. The reference section is generated automatically from the code.","title":"yaml2rss documentation"},{"location":"#yaml2rss-documentation","text":"Generate a RSS podcast feed from YAML. For a step by step tutorial that covers the installation process and running the project, check Getting started .","title":"yaml2rss documentation"},{"location":"#structure","text":"Tutorials : take you by the hand through a series of steps to install, run and use this software. Topic guides : discuss key topics and concepts at a fairly high level and provide useful background information and explanation. Reference guides : contain technical reference for the code. They describe how it works and how to use it but assume that you have a basic understanding of key concepts. How-to guides : they guide you through the steps involved in addressing key problems and use-cases. They are more advanced than tutorials and assume some knowledge of how this software works. This structure is based on Django's one . You can find more information about it on https://documentation.divio.com/ . Apart from this documentation, the HTTP API documentation can be found at the API server URL in the /docs directory.","title":"Structure"},{"location":"#adding-new-documentation","text":"To add new documentation, create a Markdown file in the appropriate directory with the content. It will automatically be added to the index. The reference section is generated automatically from the code.","title":"Adding new documentation"},{"location":"howto/contributing/","text":"Contributing To contribute to this project, please follow these guidelines. Tests Write tests for all your changes, including unit and integration tests if appropriate. Commit message guidelines Use the Angular semantic versioning format : {type_of_change}({scope}): {short_description} {full_description} Where: type_of_change is one of: build : Changes that affect the build system or external dependencies. ci : Changes to our CI configuration files and scripts. docs : Documentation changes. feat : A new feature. fix : A bug fix. perf : A code change that improves performance. refactor : A code change that neither fixes a bug nor adds a feature. style : Changes that do not affect the meaning of the code (spacing, formatting, missing semi-colons, etc.). test : Adding missing tests or correcting existing tests. scope : Name of the changed component. short_description : A succinct description of the change. It doesn't need to start with a capitalize letter nor end with a dot. full_description : A summary of the added changes. Commitizen Commitizen is a tool that defines a standard way of committing. It will help you write the commit message and automatically bump the software version and generate a changelog. Once install, start using cz c instead of git commit . Other commands are: cz bump --changelog : Automatic version bump. cz ch : Update the changelog. Pull request guidelines Aggregate your commits in a new branch with a meaningful name for the changes and create a pull request from the web git interface so that other team members can check your changes and propose modifications or approve it. Code quality checks Use psf/black (Python code formatter) and PyCQA/flake8 (checks the style and quality of some python code). For even more quality checks, install the pre-commit configuration available in the root directory of the repository with pre-commit install . This tool will perform several checks before every commit.","title":"Contributing"},{"location":"howto/contributing/#contributing","text":"To contribute to this project, please follow these guidelines.","title":"Contributing"},{"location":"howto/contributing/#tests","text":"Write tests for all your changes, including unit and integration tests if appropriate.","title":"Tests"},{"location":"howto/contributing/#commit-message-guidelines","text":"Use the Angular semantic versioning format : {type_of_change}({scope}): {short_description} {full_description} Where: type_of_change is one of: build : Changes that affect the build system or external dependencies. ci : Changes to our CI configuration files and scripts. docs : Documentation changes. feat : A new feature. fix : A bug fix. perf : A code change that improves performance. refactor : A code change that neither fixes a bug nor adds a feature. style : Changes that do not affect the meaning of the code (spacing, formatting, missing semi-colons, etc.). test : Adding missing tests or correcting existing tests. scope : Name of the changed component. short_description : A succinct description of the change. It doesn't need to start with a capitalize letter nor end with a dot. full_description : A summary of the added changes.","title":"Commit message guidelines"},{"location":"howto/contributing/#commitizen","text":"Commitizen is a tool that defines a standard way of committing. It will help you write the commit message and automatically bump the software version and generate a changelog. Once install, start using cz c instead of git commit . Other commands are: cz bump --changelog : Automatic version bump. cz ch : Update the changelog.","title":"Commitizen"},{"location":"howto/contributing/#pull-request-guidelines","text":"Aggregate your commits in a new branch with a meaningful name for the changes and create a pull request from the web git interface so that other team members can check your changes and propose modifications or approve it.","title":"Pull request guidelines"},{"location":"howto/contributing/#code-quality-checks","text":"Use psf/black (Python code formatter) and PyCQA/flake8 (checks the style and quality of some python code). For even more quality checks, install the pre-commit configuration available in the root directory of the repository with pre-commit install . This tool will perform several checks before every commit.","title":"Code quality checks"},{"location":"howto/dependencies/","text":"Dependencies The dependencies are fixed to an specific version two ensure compatibility. The necessary dependencies for running the project are in requirements.txt , and the required for development purposes (testing, dependency management\u2026) are in requirements-dev.txt . This files are generated automatically using pip-tools . requirements.txt is generated from the dependencies specified in setup.py (which aren't fixed to a particular version unless necessary). requirements-dev.txt are generated from the dependencies specified in requirements-dev.in (which aren't fixed to a particular version) and considering requirements.txt and docs/requirements.txt (for compatible versions). The docs dependencies are fixed to an specific version in docs/requirements.txt which is generated from docs/requirements.in . Updating the dependencies Only run this command in a virtual environment. make update This will update the requirements files and sync the local virtual environment with them. This will remove extra dependencies and ensure that the installed ones match the specified versions.","title":"Dependencies"},{"location":"howto/dependencies/#dependencies","text":"The dependencies are fixed to an specific version two ensure compatibility. The necessary dependencies for running the project are in requirements.txt , and the required for development purposes (testing, dependency management\u2026) are in requirements-dev.txt . This files are generated automatically using pip-tools . requirements.txt is generated from the dependencies specified in setup.py (which aren't fixed to a particular version unless necessary). requirements-dev.txt are generated from the dependencies specified in requirements-dev.in (which aren't fixed to a particular version) and considering requirements.txt and docs/requirements.txt (for compatible versions). The docs dependencies are fixed to an specific version in docs/requirements.txt which is generated from docs/requirements.in .","title":"Dependencies"},{"location":"howto/dependencies/#updating-the-dependencies","text":"Only run this command in a virtual environment. make update This will update the requirements files and sync the local virtual environment with them. This will remove extra dependencies and ensure that the installed ones match the specified versions.","title":"Updating the dependencies"},{"location":"howto/testing/","text":"Testing We use pytest to test our code. You can run the current tests from the root directory of the repository by executing: make test Testing scopes We use three testing scopes: unit, integration and end-to-end (e2e). Unit testing is a testing method by which individual units of source code are tested to determine if they are ready to use, whereas integration testing checks integration between software modules at the boundaries. Lastly, e2e tetsing checks the system as a whole assessing that the functionality expected by the user works as expected and that there are no system errors. Unit tests should be fast and not relay on unnecessary pieces of code or external dependencies such as databases. Test-driven development We try to follow test-driven development (TDD) principles. The methodology is as follows: Write the unit and integration tests for the functionality to be implemented. Run the tests and check that all of the new tests fail, to ensure that they are actually testing new features. Implement a basic version of the required changes for the new tests to pass. Check that all (old and new) tests pass. Improve the implementation incrementally checking that all tests still pass. One of this cycles might have subcycles. For example, if you want to add a new high level function for which you write an end-to-end (E2E) test, start writing a test for that function and use small cycles of TDD for the helper functions or dependencies in lower level layers that the new function requires.","title":"Testing"},{"location":"howto/testing/#testing","text":"We use pytest to test our code. You can run the current tests from the root directory of the repository by executing: make test","title":"Testing"},{"location":"howto/testing/#testing-scopes","text":"We use three testing scopes: unit, integration and end-to-end (e2e). Unit testing is a testing method by which individual units of source code are tested to determine if they are ready to use, whereas integration testing checks integration between software modules at the boundaries. Lastly, e2e tetsing checks the system as a whole assessing that the functionality expected by the user works as expected and that there are no system errors. Unit tests should be fast and not relay on unnecessary pieces of code or external dependencies such as databases.","title":"Testing scopes"},{"location":"howto/testing/#test-driven-development","text":"We try to follow test-driven development (TDD) principles. The methodology is as follows: Write the unit and integration tests for the functionality to be implemented. Run the tests and check that all of the new tests fail, to ensure that they are actually testing new features. Implement a basic version of the required changes for the new tests to pass. Check that all (old and new) tests pass. Improve the implementation incrementally checking that all tests still pass. One of this cycles might have subcycles. For example, if you want to add a new high level function for which you write an end-to-end (E2E) test, start writing a test for that function and use small cycles of TDD for the helper functions or dependencies in lower level layers that the new function requires.","title":"Test-driven development"},{"location":"reference/__init__/","text":"","title":"  init  "},{"location":"reference/domain/template/","text":"Module to store the template domain functions and classes. EpisodeConfig ( BaseModel ) pydantic-model Episode configuration. Attributes: Name Type Description title str Episode title. description str Episode description. pub_date datetime Episode publication date. url str Episode URL. author str Episode author. Source code in yaml2rss/domain/template.py class EpisodeConfig ( BaseModel ): \"\"\"Episode configuration. Attributes: title: Episode title. description: Episode description. pub_date: Episode publication date. url: Episode URL. author: Episode author. \"\"\" title : str description : str pub_date : datetime url : str author : str = None FileDetails ( BaseModel ) pydantic-model File details. Attributes: Name Type Description file FilePath File path. length int File length in bytes. duration int File duration in seconds. type str File mime type. Source code in yaml2rss/domain/template.py class FileDetails ( BaseModel ): \"\"\"File details. Attributes: file: File path. length: File length in bytes. duration: File duration in seconds. type: File mime type. \"\"\" file : FilePath length : int duration : int type : str @root_validator ( pre = True ) @classmethod def validate_length ( cls , values ): \"\"\"Get file length in bytes if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"length\" not in values or values [ \"length\" ] is None : values [ \"length\" ] = getsize ( values [ \"file\" ]) return values @root_validator ( pre = True ) @classmethod def validate_duration ( cls , values ): \"\"\"Get file duration in seconds if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"duration\" not in values or values [ \"duration\" ] is None : values [ \"duration\" ] = int ( get_duration ( filename = values [ \"file\" ])) return values @root_validator ( pre = True ) @classmethod def validate_type ( cls , values ): \"\"\"Get file mime type if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"type\" not in values or values [ \"type\" ] is None : values [ \"type\" ] = mime . from_file ( values [ \"file\" ]) if values [ \"type\" ] not in SUPPORTED_AUDIO_MIME_TYPES : raise ValidationError () return values validate_duration ( values ) classmethod Get file duration in seconds if None. Parameters: Name Type Description Default cls Class. required values Instance initialization values. required Returns: Type Description Values with required modifications. Source code in yaml2rss/domain/template.py @root_validator ( pre = True ) @classmethod def validate_duration ( cls , values ): \"\"\"Get file duration in seconds if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"duration\" not in values or values [ \"duration\" ] is None : values [ \"duration\" ] = int ( get_duration ( filename = values [ \"file\" ])) return values validate_length ( values ) classmethod Get file length in bytes if None. Parameters: Name Type Description Default cls Class. required values Instance initialization values. required Returns: Type Description Values with required modifications. Source code in yaml2rss/domain/template.py @root_validator ( pre = True ) @classmethod def validate_length ( cls , values ): \"\"\"Get file length in bytes if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"length\" not in values or values [ \"length\" ] is None : values [ \"length\" ] = getsize ( values [ \"file\" ]) return values validate_type ( values ) classmethod Get file mime type if None. Parameters: Name Type Description Default cls Class. required values Instance initialization values. required Returns: Type Description Values with required modifications. Source code in yaml2rss/domain/template.py @root_validator ( pre = True ) @classmethod def validate_type ( cls , values ): \"\"\"Get file mime type if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"type\" not in values or values [ \"type\" ] is None : values [ \"type\" ] = mime . from_file ( values [ \"file\" ]) if values [ \"type\" ] not in SUPPORTED_AUDIO_MIME_TYPES : raise ValidationError () return values PodcastEpisodeConfig ( EpisodeConfig ) pydantic-model Extension of episode configuration for a podcast episode. Parameters: Name Type Description Default file_details Details of the podcast audio file. required Source code in yaml2rss/domain/template.py class PodcastEpisodeConfig ( EpisodeConfig ): \"\"\"Extension of episode configuration for a podcast episode. Arguments: file_details: Details of the podcast audio file. \"\"\" file_details : FileDetails PodcastSeasonConfig ( SeasonConfig ) pydantic-model Pocast season configuration. Parameters: Name Type Description Default episodes List of podcast season episodes configuration. required Source code in yaml2rss/domain/template.py class PodcastSeasonConfig ( SeasonConfig ): \"\"\"Pocast season configuration. Arguments: episodes: List of podcast season episodes configuration. \"\"\" episodes : List [ PodcastEpisodeConfig ] PodcastTemplateConfig ( TemplateConfig ) pydantic-model Template for podcast RSS feed. Parameters: Name Type Description Default image_path Path to feed image relative to link . required image_title Feed image title. required files_root_url Base URL for the feed audio files. required files_root_path Path to the directory containing the audio files. required seasons Podcast seasons configuration. required Source code in yaml2rss/domain/template.py class PodcastTemplateConfig ( TemplateConfig ): \"\"\"Template for podcast RSS feed. Arguments: image_path: Path to feed image relative to `link`. image_title: Feed image title. files_root_url: Base URL for the feed audio files. files_root_path: Path to the directory containing the audio files. seasons: Podcast seasons configuration. \"\"\" image_path : FilePath image_title : str files_root_url : HttpUrl files_root_path : DirectoryPath = Path ( \"\" ) seasons : PodcastSeasonsConfig @root_validator ( pre = True ) @classmethod def validate_image_title ( cls , values ): \"\"\"Set the episode author to the feed author if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"image_title\" not in values or values [ \"image_title\" ] is None : values [ \"image_title\" ] = values [ \"title\" ] return values @root_validator ( pre = True ) @classmethod def validate_files_root_url ( cls , values ): \"\"\"Set the files root URl to `link` if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"files_root_url\" not in values or values [ \"files_root_url\" ] is None : values [ \"files_root_url\" ] = values [ \"link\" ] return values @root_validator ( pre = True ) @classmethod def validate_episode_file ( cls , values ): \"\"\"Add the `files_root_path` to the episodes files. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" for season in values [ \"seasons\" ]: for episode in season [ \"episodes\" ]: file_details : dict = episode [ \"file_details\" ] if \"file\" in file_details and file_details [ \"file\" ] is not None : episode [ \"file_details\" ][ \"file\" ] = ( values [ \"files_root_path\" ] + file_details [ \"file\" ] ) return values @root_validator ( pre = True ) @classmethod def validate_episode_url ( cls , values ): \"\"\"Set the episodes URL to `files_root_url` + `file` if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" for season in values [ \"seasons\" ]: for episode in season [ \"episodes\" ]: if \"url\" not in episode or episode [ \"url\" ] is None : episode [ \"url\" ] = ( values [ \"files_root_url\" ] + episode [ \"file_details\" ][ \"file\" ] ) return values validate_episode_file ( values ) classmethod Add the files_root_path to the episodes files. Parameters: Name Type Description Default cls Class. required values Instance initialization values. required Returns: Type Description Values with required modifications. Source code in yaml2rss/domain/template.py @root_validator ( pre = True ) @classmethod def validate_episode_file ( cls , values ): \"\"\"Add the `files_root_path` to the episodes files. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" for season in values [ \"seasons\" ]: for episode in season [ \"episodes\" ]: file_details : dict = episode [ \"file_details\" ] if \"file\" in file_details and file_details [ \"file\" ] is not None : episode [ \"file_details\" ][ \"file\" ] = ( values [ \"files_root_path\" ] + file_details [ \"file\" ] ) return values validate_episode_url ( values ) classmethod Set the episodes URL to files_root_url + file if None. Parameters: Name Type Description Default cls Class. required values Instance initialization values. required Returns: Type Description Values with required modifications. Source code in yaml2rss/domain/template.py @root_validator ( pre = True ) @classmethod def validate_episode_url ( cls , values ): \"\"\"Set the episodes URL to `files_root_url` + `file` if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" for season in values [ \"seasons\" ]: for episode in season [ \"episodes\" ]: if \"url\" not in episode or episode [ \"url\" ] is None : episode [ \"url\" ] = ( values [ \"files_root_url\" ] + episode [ \"file_details\" ][ \"file\" ] ) return values validate_files_root_url ( values ) classmethod Set the files root URl to link if None. Parameters: Name Type Description Default cls Class. required values Instance initialization values. required Returns: Type Description Values with required modifications. Source code in yaml2rss/domain/template.py @root_validator ( pre = True ) @classmethod def validate_files_root_url ( cls , values ): \"\"\"Set the files root URl to `link` if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"files_root_url\" not in values or values [ \"files_root_url\" ] is None : values [ \"files_root_url\" ] = values [ \"link\" ] return values validate_image_title ( values ) classmethod Set the episode author to the feed author if None. Parameters: Name Type Description Default cls Class. required values Instance initialization values. required Returns: Type Description Values with required modifications. Source code in yaml2rss/domain/template.py @root_validator ( pre = True ) @classmethod def validate_image_title ( cls , values ): \"\"\"Set the episode author to the feed author if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"image_title\" not in values or values [ \"image_title\" ] is None : values [ \"image_title\" ] = values [ \"title\" ] return values SeasonConfig ( BaseModel ) pydantic-model Season configuration. Parameters: Name Type Description Default episodes List of season episodes configuration. required Source code in yaml2rss/domain/template.py class SeasonConfig ( BaseModel ): \"\"\"Season configuration. Arguments: episodes: List of season episodes configuration. \"\"\" episodes : Sequence [ EpisodeConfig ] TemplateConfig ( BaseModel ) pydantic-model Generic feed template configuration. Attributes: Name Type Description title str Feed title. description str Feed description/summary. link HttpUrl Feed home page link (base URL). feed_path Path Path of the feed XML file relative to link . author str Feed author. email EmailStr Feed author email. copyright str Feed copyright notice. language str Feed language two-letter code. last_build_date datetime Feed last build date. seaons Feed seasons configuration. Source code in yaml2rss/domain/template.py class TemplateConfig ( BaseModel ): \"\"\"Generic feed template configuration. Attributes: title: Feed title. description: Feed description/summary. link: Feed home page link (base URL). feed_path: Path of the feed XML file relative to `link`. author: Feed author. email: Feed author email. copyright: Feed copyright notice. language: Feed language two-letter code. last_build_date: Feed last build date. seaons: Feed seasons configuration. \"\"\" title : str description : str link : HttpUrl feed_path : Path author : str email : EmailStr copyright : str = None language : str = \"en\" last_build_date : datetime = datetime . now () seasons : SeasonsConfig @root_validator ( pre = True ) @classmethod def validate_copyright ( cls , values ): \"\"\"Set the copyright notice if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"copyright\" not in values or values [ \"copyright\" ] is None : values [ \"copyright\" ] = f \"Copyright { values [ 'author' ] } .\" return values @root_validator ( pre = True ) @classmethod def validate_episode_author ( cls , values ): \"\"\"Set the episode author to the feed author if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" for season in values [ \"seasons\" ]: for episode in season [ \"episodes\" ]: if \"author\" not in episode or episode [ \"author\" ] is None : episode [ \"author\" ] = values [ \"author\" ] return values validate_copyright ( values ) classmethod Set the copyright notice if None. Parameters: Name Type Description Default cls Class. required values Instance initialization values. required Returns: Type Description Values with required modifications. Source code in yaml2rss/domain/template.py @root_validator ( pre = True ) @classmethod def validate_copyright ( cls , values ): \"\"\"Set the copyright notice if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"copyright\" not in values or values [ \"copyright\" ] is None : values [ \"copyright\" ] = f \"Copyright { values [ 'author' ] } .\" return values validate_episode_author ( values ) classmethod Set the episode author to the feed author if None. Parameters: Name Type Description Default cls Class. required values Instance initialization values. required Returns: Type Description Values with required modifications. Source code in yaml2rss/domain/template.py @root_validator ( pre = True ) @classmethod def validate_episode_author ( cls , values ): \"\"\"Set the episode author to the feed author if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" for season in values [ \"seasons\" ]: for episode in season [ \"episodes\" ]: if \"author\" not in episode or episode [ \"author\" ] is None : episode [ \"author\" ] = values [ \"author\" ] return values render ( template , template_config ) Render the template with the passed configuration. Parameters: Name Type Description Default template Template Jinja template. required template_config TemplateConfig Template variable values to replace. required Returns: Type Description str Rendered template. Source code in yaml2rss/domain/template.py def render ( template : jinja2 . Template , template_config : TemplateConfig ) -> str : \"\"\"Render the template with the passed configuration. Arguments: template: Jinja template. template_config: Template variable values to replace. Returns: Rendered template. \"\"\" return template . render ( template_config )","title":"Template"},{"location":"reference/domain/template/#yaml2rss.domain.template.EpisodeConfig","text":"Episode configuration. Attributes: Name Type Description title str Episode title. description str Episode description. pub_date datetime Episode publication date. url str Episode URL. author str Episode author. Source code in yaml2rss/domain/template.py class EpisodeConfig ( BaseModel ): \"\"\"Episode configuration. Attributes: title: Episode title. description: Episode description. pub_date: Episode publication date. url: Episode URL. author: Episode author. \"\"\" title : str description : str pub_date : datetime url : str author : str = None","title":"EpisodeConfig"},{"location":"reference/domain/template/#yaml2rss.domain.template.FileDetails","text":"File details. Attributes: Name Type Description file FilePath File path. length int File length in bytes. duration int File duration in seconds. type str File mime type. Source code in yaml2rss/domain/template.py class FileDetails ( BaseModel ): \"\"\"File details. Attributes: file: File path. length: File length in bytes. duration: File duration in seconds. type: File mime type. \"\"\" file : FilePath length : int duration : int type : str @root_validator ( pre = True ) @classmethod def validate_length ( cls , values ): \"\"\"Get file length in bytes if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"length\" not in values or values [ \"length\" ] is None : values [ \"length\" ] = getsize ( values [ \"file\" ]) return values @root_validator ( pre = True ) @classmethod def validate_duration ( cls , values ): \"\"\"Get file duration in seconds if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"duration\" not in values or values [ \"duration\" ] is None : values [ \"duration\" ] = int ( get_duration ( filename = values [ \"file\" ])) return values @root_validator ( pre = True ) @classmethod def validate_type ( cls , values ): \"\"\"Get file mime type if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"type\" not in values or values [ \"type\" ] is None : values [ \"type\" ] = mime . from_file ( values [ \"file\" ]) if values [ \"type\" ] not in SUPPORTED_AUDIO_MIME_TYPES : raise ValidationError () return values","title":"FileDetails"},{"location":"reference/domain/template/#yaml2rss.domain.template.FileDetails.validate_duration","text":"Get file duration in seconds if None. Parameters: Name Type Description Default cls Class. required values Instance initialization values. required Returns: Type Description Values with required modifications. Source code in yaml2rss/domain/template.py @root_validator ( pre = True ) @classmethod def validate_duration ( cls , values ): \"\"\"Get file duration in seconds if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"duration\" not in values or values [ \"duration\" ] is None : values [ \"duration\" ] = int ( get_duration ( filename = values [ \"file\" ])) return values","title":"validate_duration()"},{"location":"reference/domain/template/#yaml2rss.domain.template.FileDetails.validate_length","text":"Get file length in bytes if None. Parameters: Name Type Description Default cls Class. required values Instance initialization values. required Returns: Type Description Values with required modifications. Source code in yaml2rss/domain/template.py @root_validator ( pre = True ) @classmethod def validate_length ( cls , values ): \"\"\"Get file length in bytes if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"length\" not in values or values [ \"length\" ] is None : values [ \"length\" ] = getsize ( values [ \"file\" ]) return values","title":"validate_length()"},{"location":"reference/domain/template/#yaml2rss.domain.template.FileDetails.validate_type","text":"Get file mime type if None. Parameters: Name Type Description Default cls Class. required values Instance initialization values. required Returns: Type Description Values with required modifications. Source code in yaml2rss/domain/template.py @root_validator ( pre = True ) @classmethod def validate_type ( cls , values ): \"\"\"Get file mime type if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"type\" not in values or values [ \"type\" ] is None : values [ \"type\" ] = mime . from_file ( values [ \"file\" ]) if values [ \"type\" ] not in SUPPORTED_AUDIO_MIME_TYPES : raise ValidationError () return values","title":"validate_type()"},{"location":"reference/domain/template/#yaml2rss.domain.template.PodcastEpisodeConfig","text":"Extension of episode configuration for a podcast episode. Parameters: Name Type Description Default file_details Details of the podcast audio file. required Source code in yaml2rss/domain/template.py class PodcastEpisodeConfig ( EpisodeConfig ): \"\"\"Extension of episode configuration for a podcast episode. Arguments: file_details: Details of the podcast audio file. \"\"\" file_details : FileDetails","title":"PodcastEpisodeConfig"},{"location":"reference/domain/template/#yaml2rss.domain.template.PodcastSeasonConfig","text":"Pocast season configuration. Parameters: Name Type Description Default episodes List of podcast season episodes configuration. required Source code in yaml2rss/domain/template.py class PodcastSeasonConfig ( SeasonConfig ): \"\"\"Pocast season configuration. Arguments: episodes: List of podcast season episodes configuration. \"\"\" episodes : List [ PodcastEpisodeConfig ]","title":"PodcastSeasonConfig"},{"location":"reference/domain/template/#yaml2rss.domain.template.PodcastTemplateConfig","text":"Template for podcast RSS feed. Parameters: Name Type Description Default image_path Path to feed image relative to link . required image_title Feed image title. required files_root_url Base URL for the feed audio files. required files_root_path Path to the directory containing the audio files. required seasons Podcast seasons configuration. required Source code in yaml2rss/domain/template.py class PodcastTemplateConfig ( TemplateConfig ): \"\"\"Template for podcast RSS feed. Arguments: image_path: Path to feed image relative to `link`. image_title: Feed image title. files_root_url: Base URL for the feed audio files. files_root_path: Path to the directory containing the audio files. seasons: Podcast seasons configuration. \"\"\" image_path : FilePath image_title : str files_root_url : HttpUrl files_root_path : DirectoryPath = Path ( \"\" ) seasons : PodcastSeasonsConfig @root_validator ( pre = True ) @classmethod def validate_image_title ( cls , values ): \"\"\"Set the episode author to the feed author if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"image_title\" not in values or values [ \"image_title\" ] is None : values [ \"image_title\" ] = values [ \"title\" ] return values @root_validator ( pre = True ) @classmethod def validate_files_root_url ( cls , values ): \"\"\"Set the files root URl to `link` if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"files_root_url\" not in values or values [ \"files_root_url\" ] is None : values [ \"files_root_url\" ] = values [ \"link\" ] return values @root_validator ( pre = True ) @classmethod def validate_episode_file ( cls , values ): \"\"\"Add the `files_root_path` to the episodes files. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" for season in values [ \"seasons\" ]: for episode in season [ \"episodes\" ]: file_details : dict = episode [ \"file_details\" ] if \"file\" in file_details and file_details [ \"file\" ] is not None : episode [ \"file_details\" ][ \"file\" ] = ( values [ \"files_root_path\" ] + file_details [ \"file\" ] ) return values @root_validator ( pre = True ) @classmethod def validate_episode_url ( cls , values ): \"\"\"Set the episodes URL to `files_root_url` + `file` if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" for season in values [ \"seasons\" ]: for episode in season [ \"episodes\" ]: if \"url\" not in episode or episode [ \"url\" ] is None : episode [ \"url\" ] = ( values [ \"files_root_url\" ] + episode [ \"file_details\" ][ \"file\" ] ) return values","title":"PodcastTemplateConfig"},{"location":"reference/domain/template/#yaml2rss.domain.template.PodcastTemplateConfig.validate_episode_file","text":"Add the files_root_path to the episodes files. Parameters: Name Type Description Default cls Class. required values Instance initialization values. required Returns: Type Description Values with required modifications. Source code in yaml2rss/domain/template.py @root_validator ( pre = True ) @classmethod def validate_episode_file ( cls , values ): \"\"\"Add the `files_root_path` to the episodes files. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" for season in values [ \"seasons\" ]: for episode in season [ \"episodes\" ]: file_details : dict = episode [ \"file_details\" ] if \"file\" in file_details and file_details [ \"file\" ] is not None : episode [ \"file_details\" ][ \"file\" ] = ( values [ \"files_root_path\" ] + file_details [ \"file\" ] ) return values","title":"validate_episode_file()"},{"location":"reference/domain/template/#yaml2rss.domain.template.PodcastTemplateConfig.validate_episode_url","text":"Set the episodes URL to files_root_url + file if None. Parameters: Name Type Description Default cls Class. required values Instance initialization values. required Returns: Type Description Values with required modifications. Source code in yaml2rss/domain/template.py @root_validator ( pre = True ) @classmethod def validate_episode_url ( cls , values ): \"\"\"Set the episodes URL to `files_root_url` + `file` if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" for season in values [ \"seasons\" ]: for episode in season [ \"episodes\" ]: if \"url\" not in episode or episode [ \"url\" ] is None : episode [ \"url\" ] = ( values [ \"files_root_url\" ] + episode [ \"file_details\" ][ \"file\" ] ) return values","title":"validate_episode_url()"},{"location":"reference/domain/template/#yaml2rss.domain.template.PodcastTemplateConfig.validate_files_root_url","text":"Set the files root URl to link if None. Parameters: Name Type Description Default cls Class. required values Instance initialization values. required Returns: Type Description Values with required modifications. Source code in yaml2rss/domain/template.py @root_validator ( pre = True ) @classmethod def validate_files_root_url ( cls , values ): \"\"\"Set the files root URl to `link` if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"files_root_url\" not in values or values [ \"files_root_url\" ] is None : values [ \"files_root_url\" ] = values [ \"link\" ] return values","title":"validate_files_root_url()"},{"location":"reference/domain/template/#yaml2rss.domain.template.PodcastTemplateConfig.validate_image_title","text":"Set the episode author to the feed author if None. Parameters: Name Type Description Default cls Class. required values Instance initialization values. required Returns: Type Description Values with required modifications. Source code in yaml2rss/domain/template.py @root_validator ( pre = True ) @classmethod def validate_image_title ( cls , values ): \"\"\"Set the episode author to the feed author if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"image_title\" not in values or values [ \"image_title\" ] is None : values [ \"image_title\" ] = values [ \"title\" ] return values","title":"validate_image_title()"},{"location":"reference/domain/template/#yaml2rss.domain.template.SeasonConfig","text":"Season configuration. Parameters: Name Type Description Default episodes List of season episodes configuration. required Source code in yaml2rss/domain/template.py class SeasonConfig ( BaseModel ): \"\"\"Season configuration. Arguments: episodes: List of season episodes configuration. \"\"\" episodes : Sequence [ EpisodeConfig ]","title":"SeasonConfig"},{"location":"reference/domain/template/#yaml2rss.domain.template.TemplateConfig","text":"Generic feed template configuration. Attributes: Name Type Description title str Feed title. description str Feed description/summary. link HttpUrl Feed home page link (base URL). feed_path Path Path of the feed XML file relative to link . author str Feed author. email EmailStr Feed author email. copyright str Feed copyright notice. language str Feed language two-letter code. last_build_date datetime Feed last build date. seaons Feed seasons configuration. Source code in yaml2rss/domain/template.py class TemplateConfig ( BaseModel ): \"\"\"Generic feed template configuration. Attributes: title: Feed title. description: Feed description/summary. link: Feed home page link (base URL). feed_path: Path of the feed XML file relative to `link`. author: Feed author. email: Feed author email. copyright: Feed copyright notice. language: Feed language two-letter code. last_build_date: Feed last build date. seaons: Feed seasons configuration. \"\"\" title : str description : str link : HttpUrl feed_path : Path author : str email : EmailStr copyright : str = None language : str = \"en\" last_build_date : datetime = datetime . now () seasons : SeasonsConfig @root_validator ( pre = True ) @classmethod def validate_copyright ( cls , values ): \"\"\"Set the copyright notice if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"copyright\" not in values or values [ \"copyright\" ] is None : values [ \"copyright\" ] = f \"Copyright { values [ 'author' ] } .\" return values @root_validator ( pre = True ) @classmethod def validate_episode_author ( cls , values ): \"\"\"Set the episode author to the feed author if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" for season in values [ \"seasons\" ]: for episode in season [ \"episodes\" ]: if \"author\" not in episode or episode [ \"author\" ] is None : episode [ \"author\" ] = values [ \"author\" ] return values","title":"TemplateConfig"},{"location":"reference/domain/template/#yaml2rss.domain.template.TemplateConfig.validate_copyright","text":"Set the copyright notice if None. Parameters: Name Type Description Default cls Class. required values Instance initialization values. required Returns: Type Description Values with required modifications. Source code in yaml2rss/domain/template.py @root_validator ( pre = True ) @classmethod def validate_copyright ( cls , values ): \"\"\"Set the copyright notice if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" if \"copyright\" not in values or values [ \"copyright\" ] is None : values [ \"copyright\" ] = f \"Copyright { values [ 'author' ] } .\" return values","title":"validate_copyright()"},{"location":"reference/domain/template/#yaml2rss.domain.template.TemplateConfig.validate_episode_author","text":"Set the episode author to the feed author if None. Parameters: Name Type Description Default cls Class. required values Instance initialization values. required Returns: Type Description Values with required modifications. Source code in yaml2rss/domain/template.py @root_validator ( pre = True ) @classmethod def validate_episode_author ( cls , values ): \"\"\"Set the episode author to the feed author if None. Arguments: cls: Class. values: Instance initialization values. Returns: Values with required modifications. \"\"\" for season in values [ \"seasons\" ]: for episode in season [ \"episodes\" ]: if \"author\" not in episode or episode [ \"author\" ] is None : episode [ \"author\" ] = values [ \"author\" ] return values","title":"validate_episode_author()"},{"location":"reference/domain/template/#yaml2rss.domain.template.render","text":"Render the template with the passed configuration. Parameters: Name Type Description Default template Template Jinja template. required template_config TemplateConfig Template variable values to replace. required Returns: Type Description str Rendered template. Source code in yaml2rss/domain/template.py def render ( template : jinja2 . Template , template_config : TemplateConfig ) -> str : \"\"\"Render the template with the passed configuration. Arguments: template: Jinja template. template_config: Template variable values to replace. Returns: Rendered template. \"\"\" return template . render ( template_config )","title":"render()"},{"location":"reference/entrypoint/cli/main/","text":"Module to store the CLI.","title":"Main"},{"location":"reference/entrypoint/cli/scopes/generate/","text":"Render scope. podcast ( config_path , output_path ) Generate podcast feed from YAML. Parameters: Name Type Description Default conf_path Path to the YAML file with the feed data. required output_path str Path where the result should be written to. required Source code in yaml2rss/entrypoint/cli/scopes/generate.py @cli . command () def podcast ( config_path : str , output_path : str ) -> None : \"\"\"Generate podcast feed from YAML. Arguments: conf_path: Path to the YAML file with the feed data. output_path: Path where the result should be written to. \"\"\" generate_podcast ( config_path = config_path , output_path = output_path )","title":"Generate"},{"location":"reference/entrypoint/cli/scopes/generate/#yaml2rss.entrypoint.cli.scopes.generate.podcast","text":"Generate podcast feed from YAML. Parameters: Name Type Description Default conf_path Path to the YAML file with the feed data. required output_path str Path where the result should be written to. required Source code in yaml2rss/entrypoint/cli/scopes/generate.py @cli . command () def podcast ( config_path : str , output_path : str ) -> None : \"\"\"Generate podcast feed from YAML. Arguments: conf_path: Path to the YAML file with the feed data. output_path: Path where the result should be written to. \"\"\" generate_podcast ( config_path = config_path , output_path = output_path )","title":"podcast()"},{"location":"reference/service/jinja_environment/","text":"Module to store the Jinja environment with custom filters. date_to_rfc2822 ( date ) Format date in RFC 2822 format. Parameters: Name Type Description Default date datetime datetime object. required Returns: Type Description str String with the date in RFC 2822 format. Source code in yaml2rss/service/jinja_environment.py def date_to_rfc2822 ( date : datetime ) -> str : \"\"\"Format date in RFC 2822 format. Arguments: date: `datetime` object. Returns: String with the date in RFC 2822 format. \"\"\" return utils . formatdate ( time . mktime ( date . timetuple ()), usegmt = True )","title":"Jinja environment"},{"location":"reference/service/jinja_environment/#yaml2rss.service.jinja_environment.date_to_rfc2822","text":"Format date in RFC 2822 format. Parameters: Name Type Description Default date datetime datetime object. required Returns: Type Description str String with the date in RFC 2822 format. Source code in yaml2rss/service/jinja_environment.py def date_to_rfc2822 ( date : datetime ) -> str : \"\"\"Format date in RFC 2822 format. Arguments: date: `datetime` object. Returns: String with the date in RFC 2822 format. \"\"\" return utils . formatdate ( time . mktime ( date . timetuple ()), usegmt = True )","title":"date_to_rfc2822()"},{"location":"reference/service/service/","text":"Module to store the package services (mediators between entrypoints and domain). generate_podcast ( config_path , output_path ) Write the rendered podcast feed to a file. Parameters: Name Type Description Default conf_path Path to the YAML file with the feed data. required output_path str Path where the result should be written to. required Source code in yaml2rss/service/service.py def generate_podcast ( config_path : FilePath , output_path : str ) -> None : \"\"\"Write the rendered podcast feed to a file. Arguments: conf_path: Path to the YAML file with the feed data. output_path: Path where the result should be written to. \"\"\" template : Template = jinja_environment . get_template ( \"podcast.xml.j2\" ) with open ( config_path , \"r\" ) as file : config = yaml . safe_load ( file ) result : str = render ( template = template , template_config = PodcastTemplateConfig . parse_obj ( config ), ) with open ( output_path , \"w\" ) as file : file . write ( result )","title":"Service"},{"location":"reference/service/service/#yaml2rss.service.service.generate_podcast","text":"Write the rendered podcast feed to a file. Parameters: Name Type Description Default conf_path Path to the YAML file with the feed data. required output_path str Path where the result should be written to. required Source code in yaml2rss/service/service.py def generate_podcast ( config_path : FilePath , output_path : str ) -> None : \"\"\"Write the rendered podcast feed to a file. Arguments: conf_path: Path to the YAML file with the feed data. output_path: Path where the result should be written to. \"\"\" template : Template = jinja_environment . get_template ( \"podcast.xml.j2\" ) with open ( config_path , \"r\" ) as file : config = yaml . safe_load ( file ) result : str = render ( template = template , template_config = PodcastTemplateConfig . parse_obj ( config ), ) with open ( output_path , \"w\" ) as file : file . write ( result )","title":"generate_podcast()"},{"location":"topics/code_structure/","text":"Code structure The sources are in yaml2rss/ . The structure is as follows: +------------+ +---------------+ | db backend | | External APIs | +------------+ +---------------+ | | +-------|----------------|---+ | | | | | +------+ +--------+ | | | | data | | domain | | | | +------+ +--------+ | | | | | | | | | | +-------------------+ | | | | service | | | | +-------------------+ | | | | | | +-------------+ | | | entrypoints | | | +-------------+ | | | | +-------|--------------------+ | +----------+ | frontend | +----------+ Each component should only connect with its connected ones. Each component contains a __init__.py file with a docstring explaining the component's main functionality. Components Data This component is responsible for abstracting the data persistence. Database Abstraction of the local database. Domain domain contains the business actors and logic. It has no dependencies, so that it can be tested alone and the code is as simple and clear as possible. Service This component obtains data from the data or from external APIs and interacts with domain for validation and applying logic when called by the entrypoints component. Having this layer decouples the domain from the data and the entrypoints , which facilitates testing and implementing new functionality. External APIs Abstraction of external APIs. Entrypoints This component provides access to the package functionality. The main entrypoint is a HTTP REST API but other entrypoints, such as CLIs, should be placed here.","title":"Code structure"},{"location":"topics/code_structure/#code-structure","text":"The sources are in yaml2rss/ . The structure is as follows: +------------+ +---------------+ | db backend | | External APIs | +------------+ +---------------+ | | +-------|----------------|---+ | | | | | +------+ +--------+ | | | | data | | domain | | | | +------+ +--------+ | | | | | | | | | | +-------------------+ | | | | service | | | | +-------------------+ | | | | | | +-------------+ | | | entrypoints | | | +-------------+ | | | | +-------|--------------------+ | +----------+ | frontend | +----------+ Each component should only connect with its connected ones. Each component contains a __init__.py file with a docstring explaining the component's main functionality.","title":"Code structure"},{"location":"topics/code_structure/#components","text":"","title":"Components"},{"location":"topics/code_structure/#data","text":"This component is responsible for abstracting the data persistence.","title":"Data"},{"location":"topics/code_structure/#database","text":"Abstraction of the local database.","title":"Database"},{"location":"topics/code_structure/#domain","text":"domain contains the business actors and logic. It has no dependencies, so that it can be tested alone and the code is as simple and clear as possible.","title":"Domain"},{"location":"topics/code_structure/#service","text":"This component obtains data from the data or from external APIs and interacts with domain for validation and applying logic when called by the entrypoints component. Having this layer decouples the domain from the data and the entrypoints , which facilitates testing and implementing new functionality.","title":"Service"},{"location":"topics/code_structure/#external-apis","text":"Abstraction of external APIs.","title":"External APIs"},{"location":"topics/code_structure/#entrypoints","text":"This component provides access to the package functionality. The main entrypoint is a HTTP REST API but other entrypoints, such as CLIs, should be placed here.","title":"Entrypoints"},{"location":"tutorials/docker/","text":"Docker This project can executed with docker . Building To build the Docker image run (from the root directory of this repository): docker build -t local/yaml2rss . Running Then, to run it: docker run \\ --rm \\ --name yaml2rss \\ -p 8000 :8000 \\ -e ENV_VAR = value \\ -it \\ local/yaml2rss For the list of required environment variables check Getting started . You can then access the HTTP API at http://localhost:8000 . If WEB_CONCURRENCY is not set, the number of workers will be two times the number of CPU cores/threads. The environment variables from tiangolo/uvicorn-gunicorn-fastapi are also supported.","title":"Docker"},{"location":"tutorials/docker/#docker","text":"This project can executed with docker .","title":"Docker"},{"location":"tutorials/docker/#building","text":"To build the Docker image run (from the root directory of this repository): docker build -t local/yaml2rss .","title":"Building"},{"location":"tutorials/docker/#running","text":"Then, to run it: docker run \\ --rm \\ --name yaml2rss \\ -p 8000 :8000 \\ -e ENV_VAR = value \\ -it \\ local/yaml2rss For the list of required environment variables check Getting started . You can then access the HTTP API at http://localhost:8000 . If WEB_CONCURRENCY is not set, the number of workers will be two times the number of CPU cores/threads. The environment variables from tiangolo/uvicorn-gunicorn-fastapi are also supported.","title":"Running"},{"location":"tutorials/getting_started/","text":"Getting started Installation make install Configuration The following environment variables must be defined with the database connection settings: DB_NAME = '' DB_HOST = '' DB_USER = '' DB_PASS = '' DB_PORT = '' You can define them in several ways: passing them to docker run with the -e VAR=value argument. manually using export sourcing a script with the export commands saving them in your virtualenv postactivate script ... Running Development For development, you can run the project with: uvicorn yaml2rss.entrypoints.api.main:api --reload You can then access the API at http://localhost:8000 and the Swagger UI (interactive API documentation) at http://localhost:8000/docs . Production For production, a process manager is recommended to handle multiple workers, such as gunicorn . For example: gunicorn \\ -b 0 .0.0.0:8000 \\ -w 4 \\ -k uvicorn.workers.UvicornWorker \\ yaml2rss.entrypoints.api.main:api Options: -b option specifies the binding host and port. -w option specifies the number of workers. -k option specifies the type of workers, that need to be uvicorn.workers.UvicornWorker as specified at the Uvicorn Documentation .","title":"Getting started"},{"location":"tutorials/getting_started/#getting-started","text":"","title":"Getting started"},{"location":"tutorials/getting_started/#installation","text":"make install","title":"Installation"},{"location":"tutorials/getting_started/#configuration","text":"The following environment variables must be defined with the database connection settings: DB_NAME = '' DB_HOST = '' DB_USER = '' DB_PASS = '' DB_PORT = '' You can define them in several ways: passing them to docker run with the -e VAR=value argument. manually using export sourcing a script with the export commands saving them in your virtualenv postactivate script ...","title":"Configuration"},{"location":"tutorials/getting_started/#running","text":"","title":"Running"},{"location":"tutorials/getting_started/#development","text":"For development, you can run the project with: uvicorn yaml2rss.entrypoints.api.main:api --reload You can then access the API at http://localhost:8000 and the Swagger UI (interactive API documentation) at http://localhost:8000/docs .","title":"Development"},{"location":"tutorials/getting_started/#production","text":"For production, a process manager is recommended to handle multiple workers, such as gunicorn . For example: gunicorn \\ -b 0 .0.0.0:8000 \\ -w 4 \\ -k uvicorn.workers.UvicornWorker \\ yaml2rss.entrypoints.api.main:api Options: -b option specifies the binding host and port. -w option specifies the number of workers. -k option specifies the type of workers, that need to be uvicorn.workers.UvicornWorker as specified at the Uvicorn Documentation .","title":"Production"}]}